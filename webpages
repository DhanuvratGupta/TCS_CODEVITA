
WebPagesMarks: 30
Problem Description
Consider a set of web pages, numbered from 1 to N. Each web page has links to one or more web pages. Clicking on a link in a page, takes one to the other web page. You are provided numbers of two web pages viz, starting web page and end web page. Your task is to find the minimum number of clicks required to reach the end page from the start page. If end page cannot be reached from start page, print -1 as the output. For better understanding refer Examples section.

Constraints
0 < N <= 100

0 < L < 10

Input
First line contains an integer N denoting number of web pages.

Next N lines contain L space separated integers depicting linked webpage number(s) from that webpage

Output
Print the minimum number of clicks required to open the end page from start page. If not possible, print -1 as output.

Time Limit (secs)
1

Examples
Input

5

2 4

1

1 5

2 3

5

2 3

Output

3

Explanation:

First line conveys that there is total 5 pages.

Second line conveys that there are links from page 1 to pages 2 and 4.

Third line conveys that there is a link from page 2 to page 1.

Fourth line conveys that there are links from page 3 to pages 1 and 5.

Fifth line conveys that there are links from page 4 to pages 2 and 3.

Sixth line conveys that there is a links from page 5 to page 5 itself.

Seventh line conveys that starting page is 2 and ending page is 3

From page 2, we can open only page 1. From page 1, we can open page 4. From page 4, we can open page 3. So, minimum 3 clicks are required, and this is the output.

Example 2

Input

3

2

1

1

2 3

Output

-1

Explanation:

First line conveys that there is total 3 pages.

Second line conveys that there are links from page 1 to page 2.

Third line conveys that there is a link from page 2 to page 1.

Fourth line conveys that there are links from page 3 to page 1.

Since there is no way to reach from page 2 to page 3, print -1 as output.



import java.util.*;

class Pair {
    int first;
    int second;

    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

public class HelloWorld {
    public static void main(String[] args) {
        int n;
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        sc.nextLine(); // Consume the newline character

        List<List<Integer>> list = new ArrayList<>();
        int vis[] = new int[n + 1];

        for (int i = 0; i < n; i++) {
            List<Integer> links = new ArrayList<>();
            String[] tokens = sc.nextLine().split(" ");
            for (String token : tokens) {
                links.add(Integer.parseInt(token));
            }
            list.add(links);
        }

        int s, e;
        s = sc.nextInt();
        e = sc.nextInt();
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(s, 0)); // Use Pair to store both the current page and the click count
        vis[s] = 1; // Mark the starting web page as visited

        while (!q.isEmpty()) {
            Pair currentPair = q.remove();
            int current = currentPair.first;
            int count = currentPair.second;

            if (current == e) {
                System.out.println(count);
                sc.close(); // Close the scanner when done
                return; // Exit the program
            }

            for (int nextPage : list.get(current - 1)) {
                if (vis[nextPage] == 0) {
                    q.add(new Pair(nextPage, count + 1));
                    vis[nextPage] = 1;
                }
            }
        }

        // If the while loop completes and end page is not reached
        
        System.out.println("-1");

        // Close the scanner
        sc.close();
    }
}
